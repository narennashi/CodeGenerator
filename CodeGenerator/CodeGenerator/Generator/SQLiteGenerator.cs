using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using System.IO;
using System.Linq;

namespace CodeGenerator.Generator
{
    public class SQLiteGenerator : GeneratorBase
    {
        private readonly SQLiteConnection _sqLiteConnection;

        private string[] _dbNames;
        public string[] DbNames { get => _dbNames; set => _dbNames = value; }

        public SQLiteGenerator(string path)
        {
            _sqLiteConnection = new SQLiteConnection();
            SQLiteConnectionStringBuilder sb = new SQLiteConnectionStringBuilder
            {
                DataSource = path
            };
            _sqLiteConnection.ConnectionString = sb.ToString();
            _sqLiteConnection.Open();
            _dbNames = CreateDbNames();
        }

        public override void CreateModel(string tableName, string directory, string name)
        {
            var parameters = CreateColumnParameters(tableName);
            string method = @"//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace" + $" {name}.Model" + @" 
{
    using System;
    using System.Collections.Generic;
    
    public partial class " + tableName + @"
    {
        " + string.Join(@"
        ", parameters.Select(p => @"
        " + $"public {p.Type.Name} {p.Name} " + "{get; set;}").ToList()) + @"
    }
}
";
            var path = Path.Combine(directory, $"Model/{tableName}.cs");
            FileEntry.CheckFile(path);
            using (StreamWriter sw = new StreamWriter(path))
            {
                sw.Write(method);
            }
        }

        public override void CreateDAL(string tableName, string directory, string name)
        {
            var parameters = CreateColumnParameters(tableName);
            string temp = $@"using System;
using System.Data;
using System.Data.SQLite;
using System.Text;
using {name}.DBUtility;

namespace " + $"{name}.DAL" + @"
{
    /// <summary>
    /// 数据访问类:" + tableName +
    @"
    /// </summary>
    public partial class " + tableName + @"
    {
        public " + tableName + @"()
        {
            DbHelperSqLite.Connect();
        }

        #region  BasicMethod

        /// <summary>
        /// 得到最大ID
        /// </summary>
        public int GetMaxId()
        {
            return DbHelperSqLite.GetMaxId(" + $"\"id\", \"{tableName}\");" + @"
        }

        /// <summary>
        /// 是否存在该记录
        /// </summary>
        public bool Exists(int id)
        {
            var strSql = new StringBuilder();
            strSql.Append(" + $"\"SELECT COUNT(1) FROM {tableName}\");" + @"
            strSql.Append(" + "\" WHERE id=@id\");" + @"
            SQLiteParameter[] parameters = {
                new SQLiteParameter(" + "\"@id\", DbType.Int64, 4)" + @"
            };
            parameters[0].Value = id;

            return DbHelperSqLite.Exists(strSql.ToString(), parameters);
        }

        /// <summary>
        /// 增加一条数据
        /// </summary>
        public int Add(Model." + tableName + @" model)
        {
            if (model == null) throw new ArgumentNullException(nameof(model));
            var strSql = new StringBuilder();
            strSql.Append(" + $"\"INSERT INTO {tableName}(\");" + @"
            strSql.Append(" + "\"" +
    string.Join(",", parameters.Where(p => p.Name.ToLower() != "id").Select(p => p.Name).ToList()) +
    ")\");" + @"
            strSql.Append(" + "\" VALUES (\");" + @"
            strSql.Append(" + "\"" +
    string.Join(",",
        parameters.Where(p => p.Name.ToLower() != "id").Select(p => $"@{p.Name}").ToList()) + ")\");" +
    @"
            strSql.Append(" + "\";\");" + @"
            SQLiteParameter[] parameters = {" + @"
            " + string.Join(@"
                ", parameters.Where(p => p.Name.ToLower() != "id").Select(p =>
        $"new SQLiteParameter(\"@{p.Name}\", DbType.{p.DbType}) " + "{ Value = model." + p.Name +
        " },")) +
    @"
                new SQLiteParameter(" + "\"@id\", DbType.Int64) { Value = model.id }" + @"
            };

            var obj = DbHelperSqLite.GetSingle(strSql.ToString(), parameters);
            return obj == null ? 0 : Convert.ToInt32(obj);
        }

        /// <summary>
        /// 更新一条数据
        /// </summary>
        public bool Update(Model." + tableName + @" model)
        {
            var strSql = new StringBuilder();
            strSql.Append(" + $"\"UPDATE {tableName} SET \");" + @"
            " + string.Join(@",
            ", parameters.Where(p => p.Name.ToLower() != "id")
        .Select(p => "strSql.Append(" + $"\"{p.Name}=@{p.Name}\");").ToList()) + @"
            strSql.Append(" + "\" where id=@id\");" + @"
            SQLiteParameter[] parameters = {" + @"
                " + string.Join(@"
                ", parameters.Where(p => p.Name.ToLower() != "id").Select(p =>
        $"new SQLiteParameter(\"@{p.Name}\", DbType.{p.DbType}) " + "{ Value = model." + p.Name +
        " },")) +
    @"
                new SQLiteParameter(" + "\"@id\", DbType.Int64) { Value = model.id }" + @"
            };

            var rows = DbHelperSqLite.ExecuteSql(strSql.ToString(), parameters);
            return rows > 0;
        }

        /// <summary>
        /// 删除一条数据
        /// </summary>
        public bool Delete(int id)
        {
            var strSql = new StringBuilder();
            strSql.Append(" + $"\"DELETE FROM {tableName} \");" + @"
            strSql.Append(" + " \" WHERE id=@id\");" + @"
            SQLiteParameter[] parameters = {
                    new SQLiteParameter(" + "\"@id\", DbType.Int64,4)" + @"
            };
            parameters[0].Value = id;

            var rows = DbHelperSqLite.ExecuteSql(strSql.ToString(), parameters);
            return rows > 0;
        }

        /// <summary>
        /// 批量删除数据
        /// </summary>
        public bool DeleteList(string idList)
        {
            var strSql = new StringBuilder();
            strSql.Append(" + $"\"DELETE FROM {tableName} \");" + @"
            strSql.Append(" + "\" WHERE id IN (\" + idList + \")  \");" + @"
            var rows = DbHelperSqLite.ExecuteSql(strSql.ToString());
            return rows > 0;
        }

        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public Model." + tableName + @" GetModel(int id)
        {
            var strSql = new StringBuilder();
            strSql.Append(" + $"\"SELECT TOP 1 " + string.Join(",", parameters.Select(p => $"{p.Name}").ToList()) +
    $" FROM {tableName} \");" + @"
            strSql.Append(" + "\" WHERE id=@id\");" + @"
            SQLiteParameter[] parameters = {
                new SQLiteParameter(" + "\"@id\", DbType.Int64,4)" + @"
            };
            parameters[0].Value = id;

            var model = new Model." + tableName + @"();
            var ds = DbHelperSqLite.Query(strSql.ToString(), parameters);
            return ds.Tables[0].Rows.Count > 0 ? DataRowToModel(ds.Tables[0].Rows[0]) : null;
        }

        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public Model." + tableName + @" DataRowToModel(DataRow row)
        {
            var model = new Model." + tableName + @"();
            if (row == null) return model;
            " + string.Join(@"
            ", parameters.Select(p => $"if (!string.IsNullOrEmpty(row[\"{p.Name}\"].ToString()))" + @"
            {
                " + $"model.{p.Name} = ({p.Type})Convert.ChangeType(row[" + $"\"{p.Name}\"], typeof({p.Type}));" + @"
            }").ToList()) + @"
            return model;
        }

        /// <summary>
        /// 获得数据列表
        /// </summary>
        public DataSet GetList(string strWhere)
        {
            var strSql = new StringBuilder();
            strSql.Append(" + "\"SELECT " + string.Join(",", parameters.Select(p => $"{p.Name}").ToList()) + " \");" + @"
            strSql.Append(" + $"\" FROM {tableName} \");" + @"
            if (strWhere.Trim() != " + "\"\") strSql.Append(\" WHERE \" + strWhere);" + @"
            return DbHelperSqLite.Query(strSql.ToString());
        }

        /// <summary>
        /// 获得前几行数据
        /// </summary>
        public DataSet GetList(int top, string strWhere, string filedOrder)
        {
            var strSql = new StringBuilder();
            strSql.Append(" + "\"SELECT \");" + @"
            if (top > 0) strSql.Append(" + "\" TOP \" + top);" + @"
            strSql.Append(" + "\" " + string.Join(",", parameters.Select(p => $"{p.Name}").ToList()) + " \");" + @"
            strSql.Append(" + $"\" FROM {tableName} \");" + @"
            if (strWhere.Trim() != " + "\"\") strSql.Append(\" WHERE \" + strWhere);" + @"
            strSql.Append(" + "\" ORDER BY \" + filedOrder);" + @"
            return DbHelperSqLite.Query(strSql.ToString());
        }

        /// <summary>
        /// 获取记录总数
        /// </summary>
        public int GetRecordCount(string strWhere)
        {
            var strSql = new StringBuilder();" +
                   @"
            strSql.Append(" + $"\"SELECT COUNT(1) FROM {tableName} \");" +
            @"
            if (strWhere.Trim() != " + "\"\"" + @")
            {
                strSql.Append(" + "\" WHERE \"" + @"+ strWhere);
            }
            var obj = DbHelperSqLite.GetSingle(strSql.ToString());
            return obj == null ? 0 : Convert.ToInt32(obj);
        }
        
        /// <summary>
        /// 分页获取数据列表
        /// </summary>
        public DataSet GetListByPage(string strWhere, string orderBy, int startIndex, int endIndex)
        {
            var strSql = new StringBuilder();
            strSql.Append(" + "\"SELECT* FROM( \");" + @"
            strSql.Append(" + "\" SELECT ROW_NUMBER() OVER (\");" + @"
            if (!string.IsNullOrEmpty(orderBy.Trim()))
                strSql.Append(" + "\"ORDER BY T.\" + orderBy);" + @"
            else
                strSql.Append(" + "\"ORDER BY T.id DESC\");" + @"
            strSql.Append(" + $"\")AS Row, T.*  FROM {tableName} T \");" + @"
            if (!string.IsNullOrEmpty(strWhere.Trim())) strSql.Append(" + "\" WHERE \" + strWhere);" + @"
            strSql.Append(" + "\" ) TT\");" + @"
            strSql.AppendFormat(" + "\" WHERE TT.Row BETWEEN {0} AND {1}\", startIndex, endIndex);" + @"
            return DbHelperSqLite.Query(strSql.ToString());
        }

        #endregion
    }
}
";
            var path = Path.Combine(directory, $"DAL/{tableName}.cs");
            FileEntry.CheckFile(path);
            using (StreamWriter sw = new StreamWriter(path))
            {
                sw.Write(temp);
            }
        }

        public override void CreateBLL(string tableName, string directory, string name)
        {
            string method = $@"using System;
using System.Collections.Generic;
using System.Data;
using {name}.DBUtility;

namespace " + $"{name}.BLL" + @"
{
    /// <summary>
    /// " + tableName + @"
    /// </summary>
    public partial class " + tableName + @"
    {
        private readonly " + $"{name}.DAL.{tableName} dal = new DAL.{tableName}();" + @"

        #region  BasicMethod

        /// <summary>
        /// 得到最大ID
        /// </summary>
        public int GetMaxId()
        {
            return dal.GetMaxId();
        }

        /// <summary>
        /// 是否存在该记录
        /// </summary>
        public bool Exists(int id)
        {
            return dal.Exists(id);
        }

        /// <summary>
        /// 增加一条数据
        /// </summary>
        public int Add(Model." + $"{tableName} model)" + @"
        {
            return dal.Add(model);
        }

        /// <summary>
        /// 更新一条数据
        /// </summary>
        public bool Update(Model." + $"{tableName} model)" + @"
        {
            return dal.Update(model);
        }

        /// <summary>
        /// 删除一条数据
        /// </summary>
        public bool Delete(int id)
        {

            return dal.Delete(id);
        }

        /// <summary>
        /// 删除一条数据
        /// </summary>
        public bool DeleteList(string idList)
        {
            return dal.DeleteList(PageValidate.SafeLongFilter(idList, 0));
        }

        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public Model." + tableName + @" GetModel(int id)
        {
            return dal.GetModel(id);
        }
        
        /// <summary>
        /// 获得数据列表
        /// </summary>
        public DataSet GetList(string strWhere)
        {
            return dal.GetList(strWhere);
        }

        /// <summary>
        /// 获得前几行数据
        /// </summary>
        public DataSet GetList(int top, string strWhere, string filedOrder)
        {
            return dal.GetList(top, strWhere, filedOrder);
        }

        /// <summary>
        /// 获得数据列表
        /// </summary>
        public List<Model." + $"{tableName}> GetModelList(string strWhere)" + @"
        {
            DataSet ds = dal.GetList(strWhere);
            return DataTableToList(ds.Tables[0]);
        }

        /// <summary>
        /// 获得数据列表
        /// </summary>
        public List<Model." + $"{tableName}> DataTableToList(DataTable dt)" + @"
        {
            List<Model." + $"{tableName}> modelList = new List<Model.{tableName}>();" + @"
            int rowsCount = dt.Rows.Count;
            if (rowsCount <= 0) return modelList;
            for (int n = 0; n < rowsCount; n++)
            {
                var model = dal.DataRowToModel(dt.Rows[n]);
                if (model != null) modelList.Add(model);
            }
            return modelList;
        }

        /// <summary>
        /// 获得数据列表
        /// </summary>
        public DataSet GetAllList()
        {
            return GetList(" + "\"\"" + @");
        }

        /// <summary>
        /// 分页获取数据列表
        /// </summary>
        public int GetRecordCount(string strWhere)
        {
            return dal.GetRecordCount(strWhere);
        }

        /// <summary>
        /// 分页获取数据列表
        /// </summary>
        public DataSet GetListByPage(string strWhere, string orderBy, int startIndex, int endIndex)
        {
            return dal.GetListByPage(strWhere, orderBy, startIndex, endIndex);
        }

        #endregion
    }
}
";
            var path = Path.Combine(directory, $"BLL/{tableName}.cs");
            FileEntry.CheckFile(path);
            using (StreamWriter sw = new StreamWriter(path))
            {
                sw.Write(method);
            }
        }

        private Hashtable CreateTypeMapping()
        {
            Hashtable typeMap = new Hashtable
            {
                ["BIGINT"] = new object[] { DbType.Int64, typeof(long) },
                ["BLOB"] = new object[] { DbType.Binary, typeof(byte[]) },
                ["BOOLEAN"] = new object[] { DbType.Boolean, typeof(bool) },
                ["CHAR"] = new object[] { DbType.String, typeof(string) },
                ["DATE"] = new object[] { DbType.Date, typeof(DateTime) },
                ["DATETIME"] = new object[] { DbType.DateTime, typeof(DateTime) },
                ["DECIMAL"] = new object[] { DbType.Decimal, typeof(decimal) },
                ["DOUBLE"] = new object[] { DbType.Double, typeof(double) },
                ["INTEGER"] = new object[] { DbType.Int64, typeof(long) },
                ["INT"] = new object[] { DbType.Int32, typeof(int) },
                ["NONE"] = new object[] { DbType.Object, typeof(object) },
                ["NUMERIC"] = new object[] { DbType.Decimal, typeof(decimal) },
                ["REAL"] = new object[] { DbType.Double, typeof(double) },
                ["STRING"] = new object[] { DbType.String, typeof(string) },
                ["TEXT"] = new object[] { DbType.String, typeof(string) },
                ["TIME"] = new object[] { DbType.Time, typeof(DateTime) },
                ["VARCHAR"] = new object[] { DbType.String, typeof(string) }
            };
            return typeMap;
        }

        /// <summary>
        /// 获取表的架构
        /// </summary>
        /// <param name="tableName"></param>
        /// <param name="print"></param>
        /// <returns></returns>
        private DataTable CreateSchemaTable(string tableName, bool print = false)
        {
            string sqlString = $"SELECT * FROM {tableName};";
            using (SQLiteCommand cmd = new SQLiteCommand(sqlString, _sqLiteConnection))
            {
                using (var dr = cmd.ExecuteReader())
                {
                    var dataTale = dr.GetSchemaTable();
                    return dataTale;
                }
            }
        }

        /// <summary>
        /// 获取表格所有列名及其数据类型
        /// </summary>
        /// <returns></returns>
        public ColumnParameter[] CreateColumnParameters(string tableName)
        {
            var parameters = new List<ColumnParameter>();

            var schemaTable = CreateSchemaTable(tableName, false);
            var hashtable = CreateTypeMapping();
            foreach (DataRow dataRow in schemaTable.Rows)
            {
                var objects = (object[])hashtable[dataRow["DataTypeName"].ToString().Trim()]; ;
                parameters.Add(new ColumnParameter
                {
                    Name = dataRow["ColumnName"].ToString(),

                    // 此处需要将字符串可能存在最后一个空格去掉
                    DbType = (DbType)objects[0],
                    Type = (Type)objects[1]
                });
            }

            return parameters.ToArray();
        }

        /// <summary>
        /// 获取表格
        /// </summary>
        /// <returns></returns>
        public string[] CreateDbNames()
        {
            List<string> nameList = new List<string>();
            string sqlString = @"SELECT name FROM sqlite_master 
WHERE type IN ('table','view') 
AND name NOT LIKE 'sqlite_%'
ORDER BY 1;";
            using (SQLiteCommand cmd = new SQLiteCommand(sqlString, _sqLiteConnection))
            {
                using (var dr = cmd.ExecuteReader())
                {
                    while (dr.Read())
                    {
                        nameList.Add(dr["NAME"].ToString());
                    }
                }
            }

            return nameList.ToArray();
        }
    }

    public class ColumnParameter
    {
        /// <summary>
        /// 列名
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// 列对应的DbType
        /// </summary>
        public DbType DbType { get; set; }

        /// <summary>
        /// 列所对应的数据类型
        /// </summary>
        public Type Type { get; set; }
    }
}
